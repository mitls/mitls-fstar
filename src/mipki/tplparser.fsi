// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | SEMI
  | GT
  | LT
  | STAR
  | DOLLAR
  | EQ
  | ASSIGN
  | COLON
  | COMMA
  | BCLOSE
  | BOPEN
  | PCLOSE
  | POPEN
  | CCLOSE
  | COPEN
  | T_AS
  | T_OID
  | T_GENDATE
  | T_UTCDATE
  | T_BOOL
  | T_INT
  | T_NULL
  | T_BMP
  | T_UNIVERSAL
  | T_TELETEX
  | T_UTF8
  | T_PRINTABLE
  | T_IA5
  | T_BITSTRING
  | T_OCTSTRING
  | T_DEFAULT
  | T_OPTION
  | T_TAG
  | T_DEFBY
  | T_CHOICE
  | T_SETOF
  | T_SEQOF
  | T_SET
  | T_SEQ
  | K_LITERAL of (asntype * bytes)
  | K_INT of (int)
  | K_STRING of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_STAR
    | TOKEN_DOLLAR
    | TOKEN_EQ
    | TOKEN_ASSIGN
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_BCLOSE
    | TOKEN_BOPEN
    | TOKEN_PCLOSE
    | TOKEN_POPEN
    | TOKEN_CCLOSE
    | TOKEN_COPEN
    | TOKEN_T_AS
    | TOKEN_T_OID
    | TOKEN_T_GENDATE
    | TOKEN_T_UTCDATE
    | TOKEN_T_BOOL
    | TOKEN_T_INT
    | TOKEN_T_NULL
    | TOKEN_T_BMP
    | TOKEN_T_UNIVERSAL
    | TOKEN_T_TELETEX
    | TOKEN_T_UTF8
    | TOKEN_T_PRINTABLE
    | TOKEN_T_IA5
    | TOKEN_T_BITSTRING
    | TOKEN_T_OCTSTRING
    | TOKEN_T_DEFAULT
    | TOKEN_T_OPTION
    | TOKEN_T_TAG
    | TOKEN_T_DEFBY
    | TOKEN_T_CHOICE
    | TOKEN_T_SETOF
    | TOKEN_T_SEQOF
    | TOKEN_T_SET
    | TOKEN_T_SEQ
    | TOKEN_K_LITERAL
    | TOKEN_K_INT
    | TOKEN_K_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM__startstart_asn
    | NONTERM_start
    | NONTERM_start_asn
    | NONTERM_tpldefs
    | NONTERM_tplvar
    | NONTERM_asn1
    | NONTERM_asn1_list
    | NONTERM_tpl
    | NONTERM_valueset
    | NONTERM_vlist
    | NONTERM_bounds
    | NONTERM_defval
    | NONTERM_impl
    | NONTERM_tagging
    | NONTERM_optsubs
    | NONTERM_tplsubst
    | NONTERM_optval
    | NONTERM_noopt_list
    | NONTERM_tpl_list
    | NONTERM_tag
    | NONTERM_vkind
    | NONTERM_vkind_tag
    | NONTERM_literal_tagged
    | NONTERM_literal
    | NONTERM_defbys
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( asntpl ) 
val start_asn : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( asn1 ) 

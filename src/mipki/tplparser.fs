// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "tplparser.fsy"


open SBA
open Asn1
open TplAst


# 14 "tplparser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SEMI
  | GT
  | LT
  | STAR
  | DOLLAR
  | EQ
  | ASSIGN
  | COLON
  | COMMA
  | BCLOSE
  | BOPEN
  | PCLOSE
  | POPEN
  | CCLOSE
  | COPEN
  | T_AS
  | T_OID
  | T_GENDATE
  | T_UTCDATE
  | T_BOOL
  | T_INT
  | T_NULL
  | T_BMP
  | T_UNIVERSAL
  | T_TELETEX
  | T_UTF8
  | T_PRINTABLE
  | T_IA5
  | T_BITSTRING
  | T_OCTSTRING
  | T_DEFAULT
  | T_OPTION
  | T_TAG
  | T_DEFBY
  | T_CHOICE
  | T_SETOF
  | T_SEQOF
  | T_SET
  | T_SEQ
  | K_LITERAL of (asntype * bytes)
  | K_INT of (int)
  | K_STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_STAR
    | TOKEN_DOLLAR
    | TOKEN_EQ
    | TOKEN_ASSIGN
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_BCLOSE
    | TOKEN_BOPEN
    | TOKEN_PCLOSE
    | TOKEN_POPEN
    | TOKEN_CCLOSE
    | TOKEN_COPEN
    | TOKEN_T_AS
    | TOKEN_T_OID
    | TOKEN_T_GENDATE
    | TOKEN_T_UTCDATE
    | TOKEN_T_BOOL
    | TOKEN_T_INT
    | TOKEN_T_NULL
    | TOKEN_T_BMP
    | TOKEN_T_UNIVERSAL
    | TOKEN_T_TELETEX
    | TOKEN_T_UTF8
    | TOKEN_T_PRINTABLE
    | TOKEN_T_IA5
    | TOKEN_T_BITSTRING
    | TOKEN_T_OCTSTRING
    | TOKEN_T_DEFAULT
    | TOKEN_T_OPTION
    | TOKEN_T_TAG
    | TOKEN_T_DEFBY
    | TOKEN_T_CHOICE
    | TOKEN_T_SETOF
    | TOKEN_T_SEQOF
    | TOKEN_T_SET
    | TOKEN_T_SEQ
    | TOKEN_K_LITERAL
    | TOKEN_K_INT
    | TOKEN_K_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM__startstart_asn
    | NONTERM_start
    | NONTERM_start_asn
    | NONTERM_tpldefs
    | NONTERM_tplvar
    | NONTERM_asn1
    | NONTERM_asn1_list
    | NONTERM_tpl
    | NONTERM_valueset
    | NONTERM_vlist
    | NONTERM_bounds
    | NONTERM_defval
    | NONTERM_impl
    | NONTERM_tagging
    | NONTERM_optsubs
    | NONTERM_tplsubst
    | NONTERM_optval
    | NONTERM_noopt_list
    | NONTERM_tpl_list
    | NONTERM_tag
    | NONTERM_vkind
    | NONTERM_vkind_tag
    | NONTERM_literal_tagged
    | NONTERM_literal
    | NONTERM_defbys

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SEMI  -> 1 
  | GT  -> 2 
  | LT  -> 3 
  | STAR  -> 4 
  | DOLLAR  -> 5 
  | EQ  -> 6 
  | ASSIGN  -> 7 
  | COLON  -> 8 
  | COMMA  -> 9 
  | BCLOSE  -> 10 
  | BOPEN  -> 11 
  | PCLOSE  -> 12 
  | POPEN  -> 13 
  | CCLOSE  -> 14 
  | COPEN  -> 15 
  | T_AS  -> 16 
  | T_OID  -> 17 
  | T_GENDATE  -> 18 
  | T_UTCDATE  -> 19 
  | T_BOOL  -> 20 
  | T_INT  -> 21 
  | T_NULL  -> 22 
  | T_BMP  -> 23 
  | T_UNIVERSAL  -> 24 
  | T_TELETEX  -> 25 
  | T_UTF8  -> 26 
  | T_PRINTABLE  -> 27 
  | T_IA5  -> 28 
  | T_BITSTRING  -> 29 
  | T_OCTSTRING  -> 30 
  | T_DEFAULT  -> 31 
  | T_OPTION  -> 32 
  | T_TAG  -> 33 
  | T_DEFBY  -> 34 
  | T_CHOICE  -> 35 
  | T_SETOF  -> 36 
  | T_SEQOF  -> 37 
  | T_SET  -> 38 
  | T_SEQ  -> 39 
  | K_LITERAL _ -> 40 
  | K_INT _ -> 41 
  | K_STRING _ -> 42 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SEMI 
  | 2 -> TOKEN_GT 
  | 3 -> TOKEN_LT 
  | 4 -> TOKEN_STAR 
  | 5 -> TOKEN_DOLLAR 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_ASSIGN 
  | 8 -> TOKEN_COLON 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_BCLOSE 
  | 11 -> TOKEN_BOPEN 
  | 12 -> TOKEN_PCLOSE 
  | 13 -> TOKEN_POPEN 
  | 14 -> TOKEN_CCLOSE 
  | 15 -> TOKEN_COPEN 
  | 16 -> TOKEN_T_AS 
  | 17 -> TOKEN_T_OID 
  | 18 -> TOKEN_T_GENDATE 
  | 19 -> TOKEN_T_UTCDATE 
  | 20 -> TOKEN_T_BOOL 
  | 21 -> TOKEN_T_INT 
  | 22 -> TOKEN_T_NULL 
  | 23 -> TOKEN_T_BMP 
  | 24 -> TOKEN_T_UNIVERSAL 
  | 25 -> TOKEN_T_TELETEX 
  | 26 -> TOKEN_T_UTF8 
  | 27 -> TOKEN_T_PRINTABLE 
  | 28 -> TOKEN_T_IA5 
  | 29 -> TOKEN_T_BITSTRING 
  | 30 -> TOKEN_T_OCTSTRING 
  | 31 -> TOKEN_T_DEFAULT 
  | 32 -> TOKEN_T_OPTION 
  | 33 -> TOKEN_T_TAG 
  | 34 -> TOKEN_T_DEFBY 
  | 35 -> TOKEN_T_CHOICE 
  | 36 -> TOKEN_T_SETOF 
  | 37 -> TOKEN_T_SEQOF 
  | 38 -> TOKEN_T_SET 
  | 39 -> TOKEN_T_SEQ 
  | 40 -> TOKEN_K_LITERAL 
  | 41 -> TOKEN_K_INT 
  | 42 -> TOKEN_K_STRING 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM__startstart_asn 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_start_asn 
    | 4 -> NONTERM_tpldefs 
    | 5 -> NONTERM_tpldefs 
    | 6 -> NONTERM_tplvar 
    | 7 -> NONTERM_tplvar 
    | 8 -> NONTERM_asn1 
    | 9 -> NONTERM_asn1 
    | 10 -> NONTERM_asn1 
    | 11 -> NONTERM_asn1 
    | 12 -> NONTERM_asn1 
    | 13 -> NONTERM_asn1 
    | 14 -> NONTERM_asn1_list 
    | 15 -> NONTERM_asn1_list 
    | 16 -> NONTERM_tpl 
    | 17 -> NONTERM_tpl 
    | 18 -> NONTERM_tpl 
    | 19 -> NONTERM_tpl 
    | 20 -> NONTERM_tpl 
    | 21 -> NONTERM_tpl 
    | 22 -> NONTERM_tpl 
    | 23 -> NONTERM_tpl 
    | 24 -> NONTERM_tpl 
    | 25 -> NONTERM_tpl 
    | 26 -> NONTERM_tpl 
    | 27 -> NONTERM_valueset 
    | 28 -> NONTERM_valueset 
    | 29 -> NONTERM_vlist 
    | 30 -> NONTERM_vlist 
    | 31 -> NONTERM_bounds 
    | 32 -> NONTERM_bounds 
    | 33 -> NONTERM_bounds 
    | 34 -> NONTERM_defval 
    | 35 -> NONTERM_defval 
    | 36 -> NONTERM_impl 
    | 37 -> NONTERM_impl 
    | 38 -> NONTERM_tagging 
    | 39 -> NONTERM_tagging 
    | 40 -> NONTERM_optsubs 
    | 41 -> NONTERM_optsubs 
    | 42 -> NONTERM_tplsubst 
    | 43 -> NONTERM_tplsubst 
    | 44 -> NONTERM_optval 
    | 45 -> NONTERM_optval 
    | 46 -> NONTERM_noopt_list 
    | 47 -> NONTERM_noopt_list 
    | 48 -> NONTERM_tpl_list 
    | 49 -> NONTERM_tpl_list 
    | 50 -> NONTERM_tag 
    | 51 -> NONTERM_tag 
    | 52 -> NONTERM_tag 
    | 53 -> NONTERM_tag 
    | 54 -> NONTERM_tag 
    | 55 -> NONTERM_tag 
    | 56 -> NONTERM_tag 
    | 57 -> NONTERM_tag 
    | 58 -> NONTERM_vkind 
    | 59 -> NONTERM_vkind 
    | 60 -> NONTERM_vkind 
    | 61 -> NONTERM_vkind 
    | 62 -> NONTERM_vkind 
    | 63 -> NONTERM_vkind 
    | 64 -> NONTERM_vkind_tag 
    | 65 -> NONTERM_vkind_tag 
    | 66 -> NONTERM_literal_tagged 
    | 67 -> NONTERM_literal_tagged 
    | 68 -> NONTERM_literal 
    | 69 -> NONTERM_literal 
    | 70 -> NONTERM_defbys 
    | 71 -> NONTERM_defbys 
    | 72 -> NONTERM_defbys 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SEMI  -> "SEMI" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | STAR  -> "STAR" 
  | DOLLAR  -> "DOLLAR" 
  | EQ  -> "EQ" 
  | ASSIGN  -> "ASSIGN" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | BCLOSE  -> "BCLOSE" 
  | BOPEN  -> "BOPEN" 
  | PCLOSE  -> "PCLOSE" 
  | POPEN  -> "POPEN" 
  | CCLOSE  -> "CCLOSE" 
  | COPEN  -> "COPEN" 
  | T_AS  -> "T_AS" 
  | T_OID  -> "T_OID" 
  | T_GENDATE  -> "T_GENDATE" 
  | T_UTCDATE  -> "T_UTCDATE" 
  | T_BOOL  -> "T_BOOL" 
  | T_INT  -> "T_INT" 
  | T_NULL  -> "T_NULL" 
  | T_BMP  -> "T_BMP" 
  | T_UNIVERSAL  -> "T_UNIVERSAL" 
  | T_TELETEX  -> "T_TELETEX" 
  | T_UTF8  -> "T_UTF8" 
  | T_PRINTABLE  -> "T_PRINTABLE" 
  | T_IA5  -> "T_IA5" 
  | T_BITSTRING  -> "T_BITSTRING" 
  | T_OCTSTRING  -> "T_OCTSTRING" 
  | T_DEFAULT  -> "T_DEFAULT" 
  | T_OPTION  -> "T_OPTION" 
  | T_TAG  -> "T_TAG" 
  | T_DEFBY  -> "T_DEFBY" 
  | T_CHOICE  -> "T_CHOICE" 
  | T_SETOF  -> "T_SETOF" 
  | T_SEQOF  -> "T_SEQOF" 
  | T_SET  -> "T_SET" 
  | T_SEQ  -> "T_SEQ" 
  | K_LITERAL _ -> "K_LITERAL" 
  | K_INT _ -> "K_INT" 
  | K_STRING _ -> "K_STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | DOLLAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | BCLOSE  -> (null : System.Object) 
  | BOPEN  -> (null : System.Object) 
  | PCLOSE  -> (null : System.Object) 
  | POPEN  -> (null : System.Object) 
  | CCLOSE  -> (null : System.Object) 
  | COPEN  -> (null : System.Object) 
  | T_AS  -> (null : System.Object) 
  | T_OID  -> (null : System.Object) 
  | T_GENDATE  -> (null : System.Object) 
  | T_UTCDATE  -> (null : System.Object) 
  | T_BOOL  -> (null : System.Object) 
  | T_INT  -> (null : System.Object) 
  | T_NULL  -> (null : System.Object) 
  | T_BMP  -> (null : System.Object) 
  | T_UNIVERSAL  -> (null : System.Object) 
  | T_TELETEX  -> (null : System.Object) 
  | T_UTF8  -> (null : System.Object) 
  | T_PRINTABLE  -> (null : System.Object) 
  | T_IA5  -> (null : System.Object) 
  | T_BITSTRING  -> (null : System.Object) 
  | T_OCTSTRING  -> (null : System.Object) 
  | T_DEFAULT  -> (null : System.Object) 
  | T_OPTION  -> (null : System.Object) 
  | T_TAG  -> (null : System.Object) 
  | T_DEFBY  -> (null : System.Object) 
  | T_CHOICE  -> (null : System.Object) 
  | T_SETOF  -> (null : System.Object) 
  | T_SEQOF  -> (null : System.Object) 
  | T_SET  -> (null : System.Object) 
  | T_SEQ  -> (null : System.Object) 
  | K_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | K_INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | K_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 3us; 2us; 65535us; 0us; 4us; 8us; 9us; 2us; 65535us; 0us; 8us; 8us; 8us; 8us; 65535us; 2us; 6us; 16us; 34us; 20us; 34us; 25us; 26us; 28us; 29us; 31us; 32us; 35us; 34us; 96us; 97us; 3us; 65535us; 16us; 17us; 20us; 21us; 35us; 36us; 11us; 65535us; 0us; 10us; 8us; 10us; 12us; 13us; 50us; 51us; 57us; 58us; 71us; 72us; 74us; 75us; 114us; 115us; 119us; 120us; 148us; 149us; 152us; 153us; 1us; 65535us; 79us; 80us; 2us; 65535us; 84us; 85us; 88us; 89us; 2us; 65535us; 48us; 49us; 55us; 56us; 1us; 65535us; 112us; 113us; 1us; 65535us; 102us; 103us; 5us; 65535us; 38us; 118us; 42us; 118us; 60us; 114us; 116us; 114us; 121us; 118us; 1us; 65535us; 82us; 83us; 2us; 65535us; 104us; 105us; 110us; 111us; 1us; 65535us; 118us; 119us; 2us; 65535us; 60us; 61us; 116us; 117us; 3us; 65535us; 38us; 39us; 42us; 43us; 121us; 122us; 3us; 65535us; 78us; 136us; 142us; 136us; 145us; 136us; 3us; 65535us; 78us; 79us; 142us; 137us; 145us; 146us; 1us; 65535us; 142us; 143us; 8us; 65535us; 2us; 33us; 16us; 33us; 20us; 33us; 25us; 33us; 28us; 33us; 31us; 33us; 35us; 33us; 96us; 33us; 13us; 65535us; 0us; 76us; 8us; 76us; 12us; 76us; 50us; 76us; 57us; 76us; 71us; 76us; 74us; 76us; 84us; 87us; 88us; 87us; 114us; 76us; 119us; 76us; 148us; 76us; 152us; 76us; 2us; 65535us; 67us; 68us; 149us; 150us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 6us; 9us; 12us; 21us; 25us; 37us; 39us; 42us; 45us; 47us; 49us; 55us; 57us; 60us; 62us; 65us; 69us; 73us; 77us; 79us; 88us; 102us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 2us; 7us; 25us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 2us; 32us; 33us; 2us; 32us; 33us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 40us; 1us; 40us; 1us; 40us; 2us; 42us; 43us; 2us; 42us; 43us; 2us; 42us; 43us; 1us; 42us; 1us; 42us; 1us; 44us; 1us; 44us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 2us; 66us; 67us; 1us; 66us; 1us; 66us; 2us; 68us; 69us; 1us; 68us; 1us; 68us; 2us; 70us; 71us; 2us; 70us; 71us; 2us; 70us; 71us; 1us; 70us; 1us; 72us; 1us; 72us; 1us; 72us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 178us; 180us; 182us; 185us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 221us; 224us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 292us; 294us; 296us; 299us; 301us; 303us; 306us; 309us; 312us; 314us; 316us; 318us; |]
let _fsyacc_action_rows = 154
let _fsyacc_actionTableElements = [|11us; 16390us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 11us; 0us; 49152us; 6us; 32768us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 0us; 49152us; 1us; 32768us; 0us; 5us; 0us; 16386us; 1us; 32768us; 0us; 7us; 0us; 16387us; 11us; 16390us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 11us; 0us; 16388us; 0us; 16389us; 2us; 32768us; 7us; 12us; 8us; 78us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 1us; 32768us; 1us; 14us; 0us; 16391us; 1us; 32768us; 15us; 16us; 6us; 16399us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 1us; 32768us; 14us; 18us; 0us; 16392us; 1us; 32768us; 15us; 20us; 6us; 16399us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 1us; 32768us; 14us; 22us; 0us; 16393us; 1us; 32768us; 41us; 24us; 1us; 32768us; 10us; 25us; 6us; 32768us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 0us; 16394us; 1us; 32768us; 8us; 28us; 6us; 32768us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 0us; 16395us; 1us; 32768us; 8us; 31us; 6us; 32768us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 1us; 35us; 6us; 16399us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 0us; 16398us; 1us; 32768us; 15us; 38us; 2us; 16423us; 11us; 100us; 14us; 16433us; 1us; 32768us; 14us; 40us; 0us; 16400us; 1us; 32768us; 15us; 42us; 2us; 16423us; 11us; 100us; 14us; 16433us; 1us; 32768us; 14us; 44us; 0us; 16401us; 1us; 32768us; 3us; 46us; 1us; 32768us; 42us; 47us; 1us; 32768us; 2us; 48us; 1us; 16415us; 13us; 90us; 1us; 32768us; 8us; 50us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 0us; 16402us; 1us; 32768us; 3us; 53us; 1us; 32768us; 42us; 54us; 1us; 32768us; 2us; 55us; 1us; 16415us; 13us; 90us; 1us; 32768us; 8us; 57us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 0us; 16403us; 1us; 32768us; 15us; 60us; 2us; 16423us; 11us; 100us; 14us; 16431us; 1us; 32768us; 14us; 62us; 0us; 16404us; 1us; 32768us; 3us; 64us; 1us; 32768us; 42us; 65us; 1us; 32768us; 2us; 66us; 1us; 32768us; 15us; 67us; 2us; 32768us; 31us; 151us; 40us; 147us; 1us; 32768us; 14us; 69us; 0us; 16405us; 1us; 32768us; 8us; 71us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 0us; 16406us; 1us; 32768us; 8us; 74us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 0us; 16407us; 0us; 16408us; 1us; 32768us; 8us; 78us; 13us; 32768us; 17us; 133us; 18us; 135us; 19us; 134us; 20us; 131us; 21us; 132us; 23us; 130us; 24us; 129us; 25us; 128us; 26us; 127us; 27us; 123us; 28us; 126us; 29us; 124us; 30us; 125us; 1us; 16411us; 11us; 84us; 0us; 16409us; 1us; 32768us; 42us; 82us; 1us; 16425us; 3us; 104us; 0us; 16410us; 1us; 32768us; 40us; 144us; 1us; 32768us; 10us; 86us; 0us; 16412us; 1us; 16414us; 9us; 88us; 1us; 32768us; 40us; 144us; 0us; 16413us; 1us; 32768us; 41us; 91us; 2us; 32768us; 9us; 93us; 12us; 92us; 0us; 16416us; 1us; 32768us; 41us; 94us; 1us; 32768us; 12us; 95us; 0us; 16417us; 6us; 32768us; 11us; 23us; 29us; 30us; 30us; 27us; 38us; 19us; 39us; 15us; 40us; 141us; 1us; 32768us; 12us; 98us; 0us; 16419us; 0us; 16421us; 1us; 32768us; 41us; 101us; 1us; 32768us; 10us; 102us; 1us; 16420us; 4us; 99us; 0us; 16422us; 1us; 32768us; 42us; 107us; 1us; 32768us; 2us; 106us; 0us; 16424us; 1us; 32768us; 6us; 108us; 1us; 32768us; 42us; 109us; 1us; 16427us; 9us; 110us; 1us; 32768us; 42us; 107us; 0us; 16426us; 1us; 16418us; 13us; 96us; 0us; 16428us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 1us; 32768us; 1us; 116us; 2us; 16423us; 11us; 100us; 14us; 16431us; 0us; 16430us; 1us; 16429us; 32us; 112us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 1us; 32768us; 1us; 121us; 2us; 16423us; 11us; 100us; 14us; 16433us; 0us; 16432us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 1us; 32768us; 41us; 139us; 1us; 32768us; 10us; 140us; 0us; 16449us; 1us; 16451us; 16us; 142us; 14us; 32768us; 11us; 138us; 17us; 133us; 18us; 135us; 19us; 134us; 20us; 131us; 21us; 132us; 23us; 130us; 24us; 129us; 25us; 128us; 26us; 127us; 27us; 123us; 28us; 126us; 29us; 124us; 30us; 125us; 0us; 16450us; 1us; 16453us; 16us; 145us; 13us; 32768us; 17us; 133us; 18us; 135us; 19us; 134us; 20us; 131us; 21us; 132us; 23us; 130us; 24us; 129us; 25us; 128us; 26us; 127us; 27us; 123us; 28us; 126us; 29us; 124us; 30us; 125us; 0us; 16452us; 1us; 32768us; 8us; 148us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 2us; 16455us; 31us; 151us; 40us; 147us; 0us; 16454us; 1us; 32768us; 8us; 152us; 11us; 32768us; 5us; 81us; 29us; 73us; 30us; 70us; 34us; 63us; 35us; 59us; 36us; 52us; 37us; 45us; 38us; 41us; 39us; 37us; 40us; 144us; 42us; 77us; 0us; 16456us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 20us; 21us; 23us; 24us; 26us; 27us; 39us; 40us; 41us; 44us; 56us; 58us; 59us; 61us; 68us; 70us; 71us; 73us; 80us; 82us; 83us; 85us; 87us; 94us; 95us; 97us; 104us; 105us; 107us; 114us; 115us; 116us; 118us; 125us; 126us; 128us; 131us; 133us; 134us; 136us; 139us; 141us; 142us; 144us; 146us; 148us; 150us; 152us; 164us; 165us; 167us; 169us; 171us; 173us; 175us; 187us; 188us; 190us; 193us; 195us; 196us; 198us; 200us; 202us; 204us; 207us; 209us; 210us; 212us; 224us; 225us; 227us; 239us; 240us; 241us; 243us; 257us; 259us; 260us; 262us; 264us; 265us; 267us; 269us; 270us; 272us; 274us; 275us; 277us; 280us; 281us; 283us; 285us; 286us; 293us; 295us; 296us; 297us; 299us; 301us; 303us; 304us; 306us; 308us; 309us; 311us; 313us; 315us; 317us; 318us; 320us; 321us; 333us; 335us; 338us; 339us; 341us; 353us; 355us; 358us; 359us; 360us; 361us; 362us; 363us; 364us; 365us; 366us; 367us; 368us; 369us; 370us; 371us; 372us; 373us; 374us; 376us; 378us; 379us; 381us; 396us; 397us; 399us; 413us; 414us; 416us; 428us; 431us; 432us; 434us; 446us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 2us; 1us; 0us; 4us; 4us; 4us; 4us; 3us; 3us; 1us; 3us; 0us; 4us; 4us; 7us; 7us; 4us; 7us; 3us; 3us; 1us; 4us; 3us; 0us; 3us; 3us; 1us; 0us; 3us; 5us; 0us; 3us; 0us; 1us; 4us; 0us; 3us; 0us; 5us; 3us; 2us; 0us; 4us; 0us; 5us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 3us; 1us; 4us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 16419us; 16421us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 16428us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 16432us; 16434us; 16435us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 65535us; 65535us; 16449us; 65535us; 65535us; 16450us; 65535us; 65535us; 16452us; 65535us; 65535us; 65535us; 16454us; 65535us; 65535us; 16456us; |]
let _fsyacc_reductions ()  =    [| 
# 418 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  asntpl )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 427 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  asn1 )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_asn));
# 436 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpldefs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "tplparser.fsy"
                                         _1
                   )
# 62 "tplparser.fsy"
                 :  asntpl ));
# 447 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "tplparser.fsy"
                                          _1
                   )
# 63 "tplparser.fsy"
                 :  asn1 ));
# 458 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tplvar)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpldefs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "tplparser.fsy"
                                       _2
                   )
# 66 "tplparser.fsy"
                 : 'tpldefs));
# 470 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "tplparser.fsy"
                            _1
                   )
# 67 "tplparser.fsy"
                 : 'tpldefs));
# 481 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "tplparser.fsy"
                        
                   )
# 70 "tplparser.fsy"
                 : 'tplvar));
# 491 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "tplparser.fsy"
                                                 savetpl _1 _3
                   )
# 71 "tplparser.fsy"
                 : 'tplvar));
# 503 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "tplparser.fsy"
                                                     A_SEQ(false, _3)
                   )
# 74 "tplparser.fsy"
                 : 'asn1));
# 514 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "tplparser.fsy"
                                                     A_SEQ(true, _3)
                   )
# 75 "tplparser.fsy"
                 : 'asn1));
# 525 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "tplparser.fsy"
                                                A_TAG(_2, _4)
                   )
# 76 "tplparser.fsy"
                 : 'asn1));
# 537 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "tplparser.fsy"
                                               A_ENC(false, _3)
                   )
# 77 "tplparser.fsy"
                 : 'asn1));
# 548 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "tplparser.fsy"
                                               A_ENC(true, _3)
                   )
# 78 "tplparser.fsy"
                 : 'asn1));
# 559 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal_tagged)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "tplparser.fsy"
                                       A_CST(_1)
                   )
# 79 "tplparser.fsy"
                 : 'asn1));
# 570 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "tplparser.fsy"
                                            _1 :: _3
                   )
# 82 "tplparser.fsy"
                 : 'asn1_list));
# 582 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "tplparser.fsy"
                        []
                   )
# 83 "tplparser.fsy"
                 : 'asn1_list));
# 592 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "tplparser.fsy"
                                                    TPL_SEQ(false, _3)
                   )
# 86 "tplparser.fsy"
                 : 'tpl));
# 603 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "tplparser.fsy"
                                                    TPL_SEQ(true, _3)
                   )
# 87 "tplparser.fsy"
                 : 'tpl));
# 614 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'bounds)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "tplparser.fsy"
                                                                TPL_SEQOF(_3, false, _5, _7)
                   )
# 88 "tplparser.fsy"
                 : 'tpl));
# 627 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'bounds)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "tplparser.fsy"
                                                                TPL_SEQOF(_3, true, _5, _7)
                   )
# 89 "tplparser.fsy"
                 : 'tpl));
# 640 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'noopt_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "tplparser.fsy"
                                                         TPL_CHOICE(_3)
                   )
# 90 "tplparser.fsy"
                 : 'tpl));
# 651 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'defbys)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "tplparser.fsy"
                                                                   TPL_DEFINEDBY(_3, _6)
                   )
# 91 "tplparser.fsy"
                 : 'tpl));
# 663 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "tplparser.fsy"
                                              TPL_ENCAPSULATED(false, _3)
                   )
# 92 "tplparser.fsy"
                 : 'tpl));
# 674 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "tplparser.fsy"
                                              TPL_ENCAPSULATED(true, _3)
                   )
# 93 "tplparser.fsy"
                 : 'tpl));
# 685 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "tplparser.fsy"
                                TPL_CONSTANT(_1)
                   )
# 94 "tplparser.fsy"
                 : 'tpl));
# 696 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'vkind)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueset)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "tplparser.fsy"
                                                      TPL_VARIABLE(_1, _3, _4)
                   )
# 95 "tplparser.fsy"
                 : 'tpl));
# 709 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'optsubs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "tplparser.fsy"
                                                (tplsub (_3) (lookup _2))
                   )
# 96 "tplparser.fsy"
                 : 'tpl));
# 721 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "tplparser.fsy"
                        []
                   )
# 99 "tplparser.fsy"
                 : 'valueset));
# 731 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'vlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "tplparser.fsy"
                                           _2
                   )
# 100 "tplparser.fsy"
                 : 'valueset));
# 742 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'vlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "tplparser.fsy"
                                            _1 :: _3
                   )
# 103 "tplparser.fsy"
                 : 'vlist));
# 754 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "tplparser.fsy"
                                [_1]
                   )
# 104 "tplparser.fsy"
                 : 'vlist));
# 765 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "tplparser.fsy"
                        (0, 0)
                   )
# 107 "tplparser.fsy"
                 : 'bounds));
# 775 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "tplparser.fsy"
                                           (_2, 0)
                   )
# 108 "tplparser.fsy"
                 : 'bounds));
# 786 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "tplparser.fsy"
                                                       (_2, _4)
                   )
# 109 "tplparser.fsy"
                 : 'bounds));
# 798 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "tplparser.fsy"
                        None
                   )
# 112 "tplparser.fsy"
                 : 'defval));
# 808 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'asn1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "tplparser.fsy"
                                          Some(_2)
                   )
# 113 "tplparser.fsy"
                 : 'defval));
# 819 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "tplparser.fsy"
                        false
                   )
# 116 "tplparser.fsy"
                 : 'impl));
# 829 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "tplparser.fsy"
                             true
                   )
# 117 "tplparser.fsy"
                 : 'impl));
# 839 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'impl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "tplparser.fsy"
                                                Some(_2,_4)
                   )
# 120 "tplparser.fsy"
                 : 'tagging));
# 851 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "tplparser.fsy"
                        None
                   )
# 121 "tplparser.fsy"
                 : 'tagging));
# 861 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tplsubst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "tplparser.fsy"
                                       _2
                   )
# 124 "tplparser.fsy"
                 : 'optsubs));
# 872 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "tplparser.fsy"
                        []
                   )
# 125 "tplparser.fsy"
                 : 'optsubs));
# 882 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tplsubst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "tplparser.fsy"
                                                            (_1, _3)::_5
                   )
# 128 "tplparser.fsy"
                 : 'tplsubst));
# 895 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "tplparser.fsy"
                                             [(_1, _3)]
                   )
# 129 "tplparser.fsy"
                 : 'tplsubst));
# 907 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'defval)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "tplparser.fsy"
                                        O_OPTIONAL(_2)
                   )
# 132 "tplparser.fsy"
                 : 'optval));
# 918 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "tplparser.fsy"
                        O_REQUIRED
                   )
# 133 "tplparser.fsy"
                 : 'optval));
# 928 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tagging)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'noopt_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "tplparser.fsy"
                                                    (_1, _2) :: _4
                   )
# 136 "tplparser.fsy"
                 : 'noopt_list));
# 941 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "tplparser.fsy"
                        []
                   )
# 137 "tplparser.fsy"
                 : 'noopt_list));
# 951 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tagging)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optval)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "tplparser.fsy"
                                                         (_1, _2, _3) :: _5
                   )
# 140 "tplparser.fsy"
                 : 'tpl_list));
# 965 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "tplparser.fsy"
                        []
                   )
# 141 "tplparser.fsy"
                 : 'tpl_list));
# 975 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "tplparser.fsy"
                                    S_PRINT
                   )
# 144 "tplparser.fsy"
                 : 'tag));
# 985 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "tplparser.fsy"
                                    S_BIT
                   )
# 145 "tplparser.fsy"
                 : 'tag));
# 995 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "tplparser.fsy"
                                    S_OCTET
                   )
# 146 "tplparser.fsy"
                 : 'tag));
# 1005 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "tplparser.fsy"
                              S_IA5
                   )
# 147 "tplparser.fsy"
                 : 'tag));
# 1015 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "tplparser.fsy"
                               S_UTF8
                   )
# 148 "tplparser.fsy"
                 : 'tag));
# 1025 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "tplparser.fsy"
                                  S_TELETEX
                   )
# 149 "tplparser.fsy"
                 : 'tag));
# 1035 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "tplparser.fsy"
                                    S_UNIV
                   )
# 150 "tplparser.fsy"
                 : 'tag));
# 1045 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "tplparser.fsy"
                              S_BMP
                   )
# 151 "tplparser.fsy"
                 : 'tag));
# 1055 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "tplparser.fsy"
                               C_BOOL
                   )
# 154 "tplparser.fsy"
                 : 'vkind));
# 1065 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "tplparser.fsy"
                              C_INT
                   )
# 155 "tplparser.fsy"
                 : 'vkind));
# 1075 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "tplparser.fsy"
                              C_OID
                   )
# 156 "tplparser.fsy"
                 : 'vkind));
# 1085 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "tplparser.fsy"
                                  C_TIME(T_UTC)
                   )
# 157 "tplparser.fsy"
                 : 'vkind));
# 1095 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "tplparser.fsy"
                                  C_TIME(T_GEN)
                   )
# 158 "tplparser.fsy"
                 : 'vkind));
# 1105 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "tplparser.fsy"
                            C_STR(_1)
                   )
# 159 "tplparser.fsy"
                 : 'vkind));
# 1116 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vkind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "tplparser.fsy"
                              _1
                   )
# 162 "tplparser.fsy"
                 : 'vkind_tag));
# 1127 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "tplparser.fsy"
                                           C_CUSTOM(_2)
                   )
# 163 "tplparser.fsy"
                 : 'vkind_tag));
# 1138 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'vkind_tag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "tplparser.fsy"
                                                 (_3, snd (_1))
                   )
# 166 "tplparser.fsy"
                 : 'literal_tagged));
# 1150 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "tplparser.fsy"
                                  _1
                   )
# 167 "tplparser.fsy"
                 : 'literal_tagged));
# 1161 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'vkind)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "tplparser.fsy"
                                             (_3, snd (_1))
                   )
# 170 "tplparser.fsy"
                 : 'literal));
# 1173 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "tplparser.fsy"
                                  _1
                   )
# 171 "tplparser.fsy"
                 : 'literal));
# 1184 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'defbys)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "tplparser.fsy"
                                                   (_1,_3) :: _4
                   )
# 174 "tplparser.fsy"
                 : 'defbys));
# 1197 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : asntype * bytes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "tplparser.fsy"
                                            [(_1,_3)]
                   )
# 175 "tplparser.fsy"
                 : 'defbys));
# 1209 "tplparser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "tplparser.fsy"
                                            [((C_NULL, bTrue),_3)]
                   )
# 176 "tplparser.fsy"
                 : 'defbys));
|]
# 1221 "tplparser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  asntpl  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let start_asn lexer lexbuf :  asn1  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))

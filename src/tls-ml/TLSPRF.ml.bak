
let ssl_prf_int = (fun secret label seed -> (let allData = (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar (Platform.Bytes.utf8 label) secret) seed)
in (let step1 = (CoreCrypto.hash CoreCrypto.SHA1 allData)
in (let allData = (Platform.Bytes.op_At_Bar secret step1)
in (CoreCrypto.hash CoreCrypto.MD5 allData)))))

let ssl_prf = (fun secret seed nb -> (let gen_label = (fun i -> (Support.String.make (i + 1) (int_of_char 'A' + i)))
in (let rec apply_prf = (fun res n -> if (n > nb) then begin
(let _35_19 = (Platform.Bytes.split res nb)
in (match (_35_19) with
| (r, _) -> begin
r
end))
end else begin
(let step1 = (ssl_prf_int secret (gen_label (n / 16)) seed)
in (apply_prf (Platform.Bytes.op_At_Bar res step1) (n + 16)))
end)
in (apply_prf Platform.Bytes.empty_bytes 0))))

(*
let ssl_sender_client = Platform.Bytes.abytes [|0x43uy; 0x4Cuy; 0x4Euy; 0x54uy|]
let ssl_sender_server = Platform.Bytes.abytes [|0x53uy; 0x52uy; 0x56uy; 0x52uy|]
 *)
let ssl_sender_client = Platform.Bytes.abytes "0x434C4E54"
let ssl_sender_server = Platform.Bytes.abytes "0x53525652"

let ssl_verifyData = (fun ms role data -> (let ssl_sender = (match (role) with
| TLSInfo.Client -> begin
ssl_sender_client
end
| TLSInfo.Server -> begin
ssl_sender_server
end)
in (let mm = (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar data ssl_sender) ms)
in (let inner_md5 = (CoreCrypto.hash CoreCrypto.MD5 (Platform.Bytes.op_At_Bar mm HMAC.ssl_pad1_md5))
in (let outer_md5 = (CoreCrypto.hash CoreCrypto.MD5 (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar ms HMAC.ssl_pad2_md5) inner_md5))
in (let inner_sha1 = (CoreCrypto.hash CoreCrypto.SHA1 (Platform.Bytes.op_At_Bar mm HMAC.ssl_pad1_sha1))
in (let outer_sha1 = (CoreCrypto.hash CoreCrypto.SHA1 (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar ms HMAC.ssl_pad2_sha1) inner_sha1))
in (Platform.Bytes.op_At_Bar outer_md5 outer_sha1))))))))

let ssl_verifyCertificate = (fun hashAlg ms log -> (let _35_41 = (match (hashAlg) with
| CoreCrypto.SHA1 -> begin
(HMAC.ssl_pad1_sha1, HMAC.ssl_pad2_sha1)
end
| CoreCrypto.MD5 -> begin
(HMAC.ssl_pad1_md5, HMAC.ssl_pad2_md5)
end
| _ -> begin
(Platform.Error.unexpected "[ssl_certificate_verify] invoked on a wrong hash algorithm")
end)
in (match (_35_41) with
| (pad1, pad2) -> begin
(let forStep1 = (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar log ms) pad1)
in (let step1 = (CoreCrypto.hash hashAlg forStep1)
in (let forStep2 = (Platform.Bytes.op_At_Bar (Platform.Bytes.op_At_Bar ms pad2) step1)
in (CoreCrypto.hash hashAlg forStep2))))
end)))

let rec p_hash_int = (fun alg secret seed len it aPrev acc -> (let aCur = (HMAC.tls_mac alg secret aPrev)
in (let pCur = (HMAC.tls_mac alg secret (Platform.Bytes.op_At_Bar aCur seed))
in if (it = 1) then begin
(let hs = (TLSConstants.macSize alg)
in (let r = (len mod hs)
in (let _35_59 = (Platform.Bytes.split pCur r)
in (match (_35_59) with
| (pCur, _) -> begin
(Platform.Bytes.op_At_Bar acc pCur)
end))))
end else begin
(p_hash_int alg secret seed len (it - 1) aCur (Platform.Bytes.op_At_Bar acc pCur))
end)))

let p_hash = (fun alg secret seed len -> (let hs = (TLSConstants.macSize alg)
in (let it = ((len / hs) + 1)
in (p_hash_int alg secret seed len it seed Platform.Bytes.empty_bytes))))

let tls_prf = (fun secret label seed len -> (let l_s = (Platform.Bytes.length secret)
in (let l_s1 = ((l_s + 1) / 2)
in (let _35_74 = (Platform.Bytes.split secret l_s1)
in (match (_35_74) with
| (secret1, secret2) -> begin
(let newseed = (Platform.Bytes.op_At_Bar label seed)
in (let hmd5 = (p_hash (TLSConstants.HMAC (CoreCrypto.MD5)) secret1 newseed len)
in (let hsha1 = (p_hash (TLSConstants.HMAC (CoreCrypto.SHA1)) secret2 newseed len)
in (Platform.Bytes.xor hmd5 hsha1 len))))
end)))))

let tls_finished_label = (let tls_client_label = (Platform.Bytes.utf8 "client finished")
in (let tls_server_label = (Platform.Bytes.utf8 "server finished")
in (fun _35_1 -> (match (_35_1) with
| TLSInfo.Client -> begin
tls_client_label
end
| TLSInfo.Server -> begin
tls_server_label
end))))

let tls_verifyData = (fun ms role data -> (let md5hash = (CoreCrypto.hash CoreCrypto.MD5 data)
in (let sha1hash = (CoreCrypto.hash CoreCrypto.SHA1 data)
in (tls_prf ms (tls_finished_label role) (Platform.Bytes.op_At_Bar md5hash sha1hash) 12))))

let tls12prf = (fun cs ms label data len -> (let prfMacAlg = (TLSConstants.prfMacAlg_of_ciphersuite cs)
in (p_hash prfMacAlg ms (Platform.Bytes.op_At_Bar label data) len)))

let tls12prf' = (fun macAlg ms label data len -> (p_hash macAlg ms (Platform.Bytes.op_At_Bar label data) len))

let tls12VerifyData = (fun cs ms role data -> (let verifyDataHashAlg = (TLSConstants.verifyDataHashAlg_of_ciphersuite cs)
in (let verifyDataLen = (TLSConstants.verifyDataLen_of_ciphersuite cs)
in (let hashed = (CoreCrypto.hash verifyDataHashAlg data)
in (tls12prf cs ms (tls_finished_label role) hashed verifyDataLen)))))

let verifyData = (fun _35_108 secret role data -> (match (_35_108) with
| (pv, cs) -> begin
(match (pv) with
| TLSConstants.SSL_3p0 -> begin
(ssl_verifyData secret role data)
end
| (TLSConstants.TLS_1p0) | (TLSConstants.TLS_1p1) -> begin
(tls_verifyData secret role data)
end
| TLSConstants.TLS_1p2 -> begin
(tls12VerifyData cs secret role data)
end)
end))

let prf = (fun _35_118 secret label data len -> (match (_35_118) with
| (pv, cs) -> begin
(match (pv) with
| TLSConstants.SSL_3p0 -> begin
(ssl_prf secret data len)
end
| (TLSConstants.TLS_1p0) | (TLSConstants.TLS_1p1) -> begin
(tls_prf secret label data len)
end
| TLSConstants.TLS_1p2 -> begin
(tls12prf cs secret label data len)
end)
end))

let prf' = (fun a secret data len -> (match (a) with
| TLSConstants.PRF_TLS_1p2 (label, macAlg) -> begin
(tls12prf' macAlg secret label data len)
end
| TLSConstants.PRF_TLS_1p01 (label) -> begin
(tls_prf secret label data len)
end
| TLSConstants.PRF_SSL3_nested -> begin
(ssl_prf secret data len)
end
| _ -> begin
(Platform.Error.unexpected "[prf\'] unreachable pattern match")
end))

let extract = (fun a secret data len -> (prf' a secret data len))

let kdf = (fun a secret data len -> (prf' a secret data len))





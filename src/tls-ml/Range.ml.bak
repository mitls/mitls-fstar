
type range =
(Support.Prims.nat * Support.Prims.nat)

type rbytes =
Platform.Bytes.bytes

let sum = (fun _36_10 _36_13 -> (match ((_36_10, _36_13)) with
| ((l0, h0), (l1, h1)) -> begin
((l0 + l1), (h0 + h1))
end))

let ivSize = (fun e -> (let authEnc = e.TLSInfo.aeAlg
in (match (authEnc) with
| TLSConstants.MACOnly (_) -> begin
0
end
| TLSConstants.MtE (encAlg, _) -> begin
(match (encAlg) with
| TLSConstants.Stream (CoreCrypto.RC4_128) -> begin
0
end
| TLSConstants.Block (alg) -> begin
(TLSConstants.blockSize alg)
end)
end
| TLSConstants.AEAD (_, _) -> begin
0
end)))

let fixedPadSize = (fun id -> (let authEnc = id.TLSInfo.aeAlg
in (match (authEnc) with
| (TLSConstants.MACOnly (_)) | (TLSConstants.AEAD (_, _)) -> begin
0
end
| TLSConstants.MtE (enc, _) -> begin
(match (enc) with
| TLSConstants.Stream (CoreCrypto.RC4_128) -> begin
0
end
| TLSConstants.Block (_) -> begin
1
end)
end)))

let maxPadSize = (fun id -> (let authEnc = id.TLSInfo.aeAlg
in (match (authEnc) with
| (TLSConstants.MACOnly (_)) | (TLSConstants.AEAD (_, _)) -> begin
0
end
| TLSConstants.MtE (enc, _) -> begin
(match (enc) with
| TLSConstants.Stream (_) -> begin
0
end
| TLSConstants.Block (alg) -> begin
(match (id.TLSInfo.pv) with
| TLSConstants.SSL_3p0 -> begin
(TLSConstants.blockSize alg)
end
| (TLSConstants.TLS_1p0) | (TLSConstants.TLS_1p1) | (TLSConstants.TLS_1p2) -> begin
256
end)
end)
end)))

let minimalPadding = (fun e len -> (let authEnc = e.TLSInfo.aeAlg
in (match (authEnc) with
| (TLSConstants.MACOnly (_)) | (TLSConstants.AEAD (_, _)) -> begin
(fixedPadSize e)
end
| TLSConstants.MtE (enc, _) -> begin
(match (enc) with
| TLSConstants.Stream (_) -> begin
(fixedPadSize e)
end
| TLSConstants.Block (alg) -> begin
(let bs = (TLSConstants.blockSize alg)
in (let lp = (len mod bs)
in (let p = (bs - lp)
in if (p < 0) then begin
(let _36_97 = (Support.Prims._assert ())
in p)
end else begin
p
end)))
end)
end)))

let minMaxPad = (fun i -> ((fixedPadSize i), (maxPadSize i)))

let cipherRangeClass = (fun e tlen -> (let authEnc = e.TLSInfo.aeAlg
in (match (authEnc) with
| (TLSConstants.MACOnly (_)) | (TLSConstants.MtE (TLSConstants.Stream (_), _)) | (TLSConstants.MtE (TLSConstants.Block (_), _)) -> begin
(let macLen = (TLSConstants.macSize (TLSInfo.macAlg_of_id e))
in (let ivL = (ivSize e)
in (let _36_127 = (minMaxPad e)
in (match (_36_127) with
| (minPad, maxPad) -> begin
(let max = (((tlen - ivL) - macLen) - minPad)
in (let _36_129 = (Support.Prims._assert ())
in (let min = (((tlen - ivL) - macLen) - maxPad)
in if (min < 0) then begin
(0, max)
end else begin
(min, max)
end)))
end))))
end
| TLSConstants.AEAD (aeadAlg, _) -> begin
(let ivL = (TLSConstants.aeadRecordIVSize aeadAlg)
in (let tagL = (TLSConstants.aeadTagSize aeadAlg)
in (let _36_140 = (minMaxPad e)
in (match (_36_140) with
| (minPad, maxPad) -> begin
(let max = (((tlen - ivL) - tagL) - minPad)
in (let _36_142 = (Support.Prims._assert ())
in (let min = (((tlen - ivL) - tagL) - maxPad)
in if (min < 0) then begin
(0, max)
end else begin
(min, max)
end)))
end))))
end)))

let targetLength = (fun e rg -> (let _36_153 = rg
in (match (_36_153) with
| (_, h) -> begin
(let authEnc = e.TLSInfo.aeAlg
in (match (authEnc) with
| (TLSConstants.MACOnly (ha)) | (TLSConstants.MtE (TLSConstants.Stream (_), ha)) | (TLSConstants.MtE (TLSConstants.Block (_), ha)) -> begin
(let macLen = (TLSConstants.macSize (TLSInfo.macAlg_of_id e))
in (let ivL = (ivSize e)
in (let prePad = (h + macLen)
in (let padLen = (minimalPadding e prePad)
in (let res = (ivL + (prePad + padLen))
in (let _36_170 = (Support.Prims._assert ())
in res))))))
end
| TLSConstants.AEAD (aeadAlg, _) -> begin
(let ivL = (TLSConstants.aeadRecordIVSize aeadAlg)
in (let tagL = (TLSConstants.aeadTagSize aeadAlg)
in (let fp = (fixedPadSize e)
in (let res = (ivL + (h + (fp + tagL)))
in (let _36_180 = (Support.Prims._assert ())
in res)))))
end))
end)))

let rangeClass = (fun e r -> (let tlen = (targetLength e r)
in if (tlen <= TLSInfo.max_TLSCipher_fragment_length) then begin
(cipherRangeClass e tlen)
end else begin
(Platform.Error.unexpected "[rangeClass] given an invalid target length.")
end))




